interface ahb_lite(input bit HCLK, HRESETn);

 logic [31:0]HADDR;
 typedef enum logic [2:0] {SINGLE = 3'b000, INCR = 3'b001, WRAP4 = 3'b010, 
                           INCR4 = 3'b011, WRAP8 = 3'b100, INCR8 = 3'b101, 
                           WRAP16 = 3'b110, INCR16 = 3'b111} hburst;
 logic HMASTLOCK;
 logic [3:0]HPROT;
 typedef enum logic [2:0] {BYTE = 3'b000, HALF_WORD = 3'b001, WORD = 3'b010,
                           DOUBLE_WORD = 3'b011, FOUR_WORD_LINE = 3'b100,
                           EIGHT_WORD_LINE = 3'b101} hsize;
 typedef enum logic [1:0] {IDLE = 2'b00, BUSY = 2'b01, 
		           NONSEQ = 2'b10, SEQ = 2'b11} htrans;
 logic[31:0]HWDATA;
 logic HWRITE;
 logic [31:0]HRDATA;
 logic HREADYOUT;
 logic HRESP;
 logic HSEL;
 logic HREADY;

 htrans HTRANS;
 hsize HSIZE;
 hburst HBURST;

 modport slave(input HADDR, HBURST, HMASTLOCK, HPROT, HSIZE, 
 HTRANS, HWDATA, HWRITE, HSEL, output HRDATA, HREADYOUT, HRESP); //DUT

 modport master(input HCLK, HRESETn, HRDATA, HREADY, HRESP, output HADDR, 
 HBURST, HMASTLOCK, HPROT, HSIZE, HTRANS, HWDATA, HWRITE, HSEL); //Driver

 modport mon(input HCLK, HRESETn, HADDR, HBURST, HMASTLOCK, HPROT, HSIZE, 
 HTRANS, HWDATA, HWRITE, HSEL, HRDATA, HREADYOUT, HRESP, HREADY);               //Monitor


endinterface

interface wrapper(input bit HCLK, HRESETn);

 logic [31:0]HADDR;
 typedef enum logic [2:0] {SINGLE = 3'b000, INCR = 3'b001, WRAP4 = 3'b010, 
                           INCR4 = 3'b011, WRAP8 = 3'b100, INCR8 = 3'b101, 
                           WRAP16 = 3'b110, INCR16 = 3'b111} hburst;
 logic HMASTLOCK;
 logic [3:0]HPROT;
 typedef enum logic [2:0] {BYTE = 3'b000, HALF_WORD = 3'b001, WORD = 3'b010,
                           DOUBLE_WORD = 3'b011, FOUR_WORD_LINE = 3'b100,
                           EIGHT_WORD_LINE = 3'b101} hsize;
 typedef enum logic [1:0] {IDLE = 2'b00, BUSY = 2'b01, 
		           NONSEQ = 2'b10, SEQ = 2'b11} htrans;
 logic [31:0]HWDATA;
 logic HWRITE;
 logic [31:0]HRDATA;
 logic HREADYOUT;
 logic HRESP;
 logic HSEL;
 logic HREADY;
 
 htrans HTRANS;
 hsize HSIZE;
 hburst HBURST;

endinterface

module wrap(a0, wrapper_if0);

 ahb_lite a0;
 wrapper wrapper_if0;

 assign wrapper_if0.HCLK = a0.HCLK;
 assign wrapper_if0.HRESETn = a0.HRESETn;
 assign wrapper_if0.HADDR = a0.HADDR;
 assign wrapper_if0.HBURST = a0.HBURST;
 assign wrapper_if0.HMASTLOCK = a0.HMASTLOCK;
 assign wrapper_if0.HPROT = a0.HPROT;
 assign wrapper_if0.HSIZE = a0.HSIZE;
 assign wrapper_if0.HTRANS = a0.HTRANS;
 assign wrapper_if0.HWDATA = a0.HWDATA;
 assign wrapper_if0.HWRITE = a0.HWRITE;
 assign wrapper_if0.HRDATA = a0.HRDATA;
 assign wrapper_if0.HREADYOUT = a0.HREADYOUT;
 assign wrapper_if0.HRESP = a0.HRESP;
 assign wrapper_if0.HSEL = a0.HSEL;
 assign wrapper_if0.HREADY = a0.HREADY;

endmodule